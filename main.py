import telebot
from telebot import types
import threading
import time
from datetime import datetime
import json
import os
import sqlite3

TOKEN = '8130043712:AAEGzwpVVDWAkRWq4a5Ga-ljRi2xVjp14tU'
ADMIN_ID = 5029226185
bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_data.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS events
                  (id INTEGER PRIMARY KEY, name TEXT, date TEXT, description TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS news
                  (id INTEGER PRIMARY KEY, title TEXT, description TEXT, photo TEXT, likes INTEGER, dislikes INTEGER, date TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS user_reactions
                  (user_id INTEGER, news_id INTEGER, reaction TEXT, PRIMARY KEY (user_id, news_id))''')
conn.commit()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_questions = {}
admin_reply_expected = False
current_question_id = None
user_ids = set()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    global user_ids
    try:
        with open('users.json', 'r') as f:
            user_ids = set(json.load(f))
    except FileNotFoundError:
        user_ids = set()

def save_event(event):
    cursor.execute('INSERT INTO events (name, date, description) VALUES (?, ?, ?)',
                   (event['name'], event['date'].strftime('%Y-%m-%d'), event['description']))
    conn.commit()

def load_events():
    cursor.execute('SELECT * FROM events')
    events = []
    for row in cursor.fetchall():
        event = {
            'id': row[0],
            'name': row[1],
            'date': datetime.strptime(row[2], '%Y-%m-%d'),
            'description': row[3]
        }
        events.append(event)
    return events

def save_news(news_item):
    cursor.execute('INSERT INTO news (title, description, photo, likes, dislikes, date) VALUES (?, ?, ?, ?, ?, ?)',
                   (news_item['title'], news_item['description'], news_item['photo'], news_item['likes'], news_item['dislikes'], news_item['date'].strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()

def load_news():
    cursor.execute('SELECT * FROM news')
    news = []
    for row in cursor.fetchall():
        news_item = {
            'id': row[0],
            'title': row[1],
            'description': row[2],
            'photo': row[3],
            'likes': row[4],
            'dislikes': row[5],
            'date': datetime.strptime(row[6], '%Y-%m-%d %H:%M:%S')
        }
        news.append(news_item)
    return news

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users():
    with open('users.json', 'w') as f:
        json.dump(list(user_ids), f)


# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def load_questions():
    global user_questions
    if os.path.exists('user_questions.json'):
        with open('user_questions.json', 'r') as f:
            user_questions = json.load(f)
    return user_questions

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
def save_questions():
    global user_questions
    with open('user_questions.json', 'w') as f:
        json.dump(user_questions, f)

def main_menu_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"), types.KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏"))
    markup.row(types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), types.KeyboardButton("üÜò –ü–æ–º–æ—â—å"))
    markup.row(types.KeyboardButton("üë§ –û–±–æ –º–Ω–µ"))
    return markup

# –ü—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_info(user):
    user_info = f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
    user_info += f"ID: {user.id}\n"
    user_info += f"–ò–º—è: {user.first_name}\n"
    if user.last_name:
        user_info += f"–§–∞–º–∏–ª–∏—è: {user.last_name}\n"
    if user.username:
        user_info += f"Username: @{user.username}\n"
    user_info += f"–Ø–∑—ã–∫: {user.language_code}\n"
    user_info += f"–ë–æ—Ç: {'–î–∞' if user.is_bot else '–ù–µ—Ç'}\n"
    return user_info

@bot.message_handler(commands=['start'])
def start(message):
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    
    if user_id not in user_ids:
        user_ids.add(user_id)
        save_users()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        user_info = get_user_info(message.from_user)
        bot.send_message(ADMIN_ID, user_info)
    
    bot.send_message(
        message.chat.id,
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã –Ø –±–æ—Ç –ê–º—Ä–∏—Ö—É–¥–æ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
        reply_markup=main_menu_markup()
    )


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        'üÜò –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n'
        'üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n'
        'üì∞ –ù–æ–≤–æ—Å—Ç–∏ - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n'
        '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n'
        'üÜò –ü–æ–º–æ—â—å - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n'
    )
    bot.send_message(message.chat.id, help_text, reply_markup=main_menu_markup())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def notify_all_users(message):
    for user_id in user_ids:
        try:
            bot.send_message(user_id, message)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


@bot.message_handler(commands=['users'])
def send_user_list(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    user_list = "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id in user_ids:
        try:
            user = bot.get_chat_member(user_id, user_id).user
            user_info = get_user_info(user)
            user_list += user_info + "\n---\n"
        except Exception as e:
            user_list += f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {str(e)}\n---\n"
    
    # –†–∞–∑–¥–µ–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    max_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    for i in range(0, len(user_list), max_length):
        bot.send_message(message.chat.id, user_list[i:i+max_length])


def ask_question(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)
    bot.register_next_step_handler(message, handle_user_question)

def cancel_action(message):
    bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup())

def add_cancel_option(markup):
    return markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))

@bot.message_handler(commands=['faq'])
def faq_command(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_question'))
    bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –±—É–¥—É—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –µ–≥–æ.", reply_markup=markup)

@bot.message_handler(commands=['events'])
def events_command(message):
    show_events(message)

@bot.message_handler(commands=['news'])
def news_command(message):
    show_news(message)

@bot.message_handler(func=lambda message: message.text == "üë§ –û–±–æ –º–Ω–µ")
def about_me(message):
    about_text = """
    ü§î –ö—Ç–æ –∂–µ —ç—Ç–æ—Ç –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –ê–º—Ä–∏—Ö—É–¥–æ? –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è!

    üéÇ –†–æ–¥–∏–ª—Å—è –≤ 2008 –≥–æ–¥—É –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–º –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–µ. –î–∞-–¥–∞, —è –µ—â—ë —Å–æ–≤—Å–µ–º –º–æ–ª–æ–¥–æ–π, –Ω–æ —É–∂–µ —É—Å–ø–µ–ª –ø–æ–∂–∏—Ç—å –≤ —Ç—Ä—ë—Ö –≥–æ—Ä–æ–¥–∞—Ö! –ö–∞–ª—É–≥–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥...

    üíª –î—É–º–∞–µ—Ç–µ, —è —Ç–æ–ª—å–∫–æ –∏ –¥–µ–ª–∞—é, —á—Ç–æ –∫–æ–¥—é? –ù—É, –ø–æ—á—Ç–∏... 
    –ù–∞—á–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë –≤ —à–∫–æ–ª–µ. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ, –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≥–æ–Ω—è—Ç—å –º—è—á, —è –≥–æ–Ω—è–ª –±–∞–≥–∏ –≤ –∫–æ–¥–µ! üêõ

    üèÜ –í 2023 –≥–æ–¥—É –∑–∞–Ω—è–ª –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ –≥–æ—Ä–æ–¥—Å–∫–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ IT-–ø—Ä–æ–µ–∫—Ç–æ–≤. –ú–∞–º–∞ –≥–æ—Ä–¥–∏—Ç—Å—è, –ø–∞–ø–∞ –≤ —à–æ–∫–µ, –∞ —è –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞—é —Ç–æ, —á—Ç–æ –ª—é–±–ª—é!

    ü§ì –Ø–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è –∑–Ω–∞—é: HTML, CSS, JavaScript, Python. 
    –Ø–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è —É—á—É: Java, C++. 
    –Ø–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —è –º–µ—á—Ç–∞—é: –Ω–∞ —è–∑—ã–∫–µ –±—É–¥—É—â–µ–≥–æ! üîÆ

    ü•ã –ê –≤—ã –¥—É–º–∞–ª–∏, —è —Ç–æ–ª—å–∫–æ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –¥—Ä—É–∂—É? –ê –≤–æ—Ç –∏ –Ω–µ—Ç! 
    –° 5 –ª–µ—Ç –∑–∞–Ω–∏–º–∞—é—Å—å –±–æ—Ä—å–±–æ–π. –ù–∞—á–∏–Ω–∞–ª —Å –¥–∑—é–¥–æ, –∞ —Å–µ–π—á–∞—Å –ø–æ–∫–æ—Ä—è—é —Å–∞–º–±–æ. 
    –ö—Ç–æ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ?

    ü§π‚Äç‚ôÇÔ∏è –í –º–æ–µ–π –∂–∏–∑–Ω–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–≤–µ –≤–µ—â–∏: —Å–ø–æ—Ä—Ç –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. 
    –ù—É, –µ—â—ë –µ–¥–∞ –∏ —Å–æ–Ω... –ò–Ω–æ–≥–¥–∞. üòÖ

    üåü –ú–æ—è —Ü–µ–ª—å? –°—Ç–∞—Ç—å —Å—É–ø–µ—Ä-–ø—É–ø–µ—Ä full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä—É—Ç—ã–µ —à—Ç—É–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—Ç –º–∏—Ä! –ò–ª–∏ —Ö–æ—Ç—è –±—ã —Å–¥–µ–ª–∞—é—Ç –µ–≥–æ —á—É—Ç–æ—á–∫—É –≤–µ—Å–µ–ª–µ–µ.

    üîç –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ? 
    –ó–∞–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –º–æ–π —Å–∞–π—Ç: amrikhudo.ru 
    –¢–∞–º –µ—Å—Ç—å –≤—Å–µ –º–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã! –ù—É, –∫—Ä–æ–º–µ –ø–∞—Ä–æ–ª—è –æ—Ç WiFi, –∫–æ–Ω–µ—á–Ω–æ.

    """
    bot.send_message(message.chat.id, about_text, reply_markup=main_menu_markup())




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
user_questions = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def load_questions():
    global user_questions
    if os.path.exists('user_questions.json'):
        with open('user_questions.json', 'r') as f:
            user_questions = json.load(f)
    return user_questions

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
def save_questions():
    global user_questions
    with open('user_questions.json', 'w') as f:
        json.dump(user_questions, f)

def handle_user_question(message):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        cancel_action(message)
        return

    user_id = message.from_user.id
    question = message.text
    question_id = str(message.message_id)

    user_questions[question_id] = {
        'user_id': user_id,
        'question': question
    }

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f'answer_{question_id}'))
    bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}:\n{question}", reply_markup=markup)

    bot.reply_to(message, "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu_markup())
    save_questions()

def process_admin_reply(message, question_id):
    global admin_reply_expected, user_questions
    
    user_questions = load_questions()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    
    if question_id in user_questions:
        user_id = user_questions[question_id]['user_id']
        question = user_questions[question_id]['question']
        answer = message.text

        bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}")

        user_questions[question_id]['status'] = 'answered'
        user_questions[question_id]['answer'] = answer
        save_questions()

        bot.reply_to(message, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    admin_reply_expected = False

# Add new function to handle news deletion
def delete_news(news_id):
    cursor.execute('DELETE FROM news WHERE id = ?', (news_id,))
    conn.commit()

def delete_event(event_id):
    cursor.execute('DELETE FROM events WHERE id = ?', (event_id,))
    conn.commit()

def update_news_reaction(news_id, user_id, reaction):
    cursor.execute('INSERT OR REPLACE INTO user_reactions (user_id, news_id, reaction) VALUES (?, ?, ?)',
                   (user_id, news_id, reaction))
    conn.commit()

def get_user_reaction(news_id, user_id):
    cursor.execute('SELECT reaction FROM user_reactions WHERE user_id = ? AND news_id = ?', (user_id, news_id))
    result = cursor.fetchone()
    return result[0] if result else None

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
events = load_events()
news = load_news()

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global admin_reply_expected, current_question_id
    
    if call.data == 'faq':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_question'))
        bot.send_message(call.message.chat.id, "–ó–¥–µ—Å—å –±—É–¥—É—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –µ–≥–æ.", reply_markup=markup)
    elif call.data == 'ask_question':
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        bot.register_next_step_handler(call.message, handle_user_question)
    elif call.data == 'events':
        show_events(call.message)
    elif call.data == 'news':
        show_news(call.message)
    elif call.data == 'help':
        help_command(call.message)
    elif call.data == 'delete_news':
        if call.from_user.id == ADMIN_ID:
            show_news_for_deletion(call.message)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.")
    elif call.data.startswith('delete_news_'):
        if call.from_user.id == ADMIN_ID:
            news_id = int(call.data.split('_')[2])
            delete_news(news_id)
            bot.answer_callback_query(call.id, "–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            show_news(call.message)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.")
    elif call.data.startswith('delete_event_'):
        if call.from_user.id == ADMIN_ID:
            event_id = int(call.data.split('_')[2])
            delete_event(event_id)
            bot.answer_callback_query(call.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            show_events(call.message)
        else:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
    elif call.data.startswith('answer_'):
        question_id = call.data.split('_')[1]
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_id}:")
        bot.register_next_step_handler(call.message, process_admin_reply, question_id)
    elif call.data.startswith('event_'):
        event_id = int(call.data.split('_')[1])
        show_event_details(call.message, event_id)
    elif call.data.startswith('news_'):
        news_id = int(call.data.split('_')[1])
        show_news_details(call.message, news_id)
    elif call.data.startswith('like_'):
        news_id = int(call.data.split('_')[1])
        handle_like(call, news_id)
    elif call.data.startswith('dislike_'):
        news_id = int(call.data.split('_')[1])
        handle_dislike(call, news_id)
    elif call.data == 'back_to_main':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                              text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", 
                              reply_markup=main_menu_markup())
        
def show_news_for_deletion(message):
    news = load_news()
    if not news:
        bot.send_message(message.chat.id, "üì∞ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_menu_markup())
        return

    markup = types.InlineKeyboardMarkup()
    for news_item in news:
        markup.add(types.InlineKeyboardButton(f"üóëÔ∏è {news_item['title']}", callback_data=f'delete_news_{news_item["id"]}'))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='news'))
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and admin_reply_expected)
def handle_admin_answer(message):
    global admin_reply_expected, current_question_id, user_questions
    
    if current_question_id in user_questions:
        user_id = user_questions[current_question_id]['user_id']
        question = user_questions[current_question_id]['question']
        answer = message.text
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞
        user_questions[current_question_id]['status'] = 'answered'
        user_questions[current_question_id]['answer'] = answer
        save_questions()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        bot.reply_to(message, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=main_menu_markup())
    else:
        bot.reply_to(message, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_markup())
    
    admin_reply_expected = False
    current_question_id = None
    

def cancel_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    return markup

def process_cancel(message):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup())
        return True
    return False

    # News functions
@bot.message_handler(commands=['addnews'])
def add_news(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.")
        return
    bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞':", reply_markup=cancel_markup())
    bot.register_next_step_handler(message, process_news_title)

def process_news_title(message):
    if process_cancel(message):
        return
    news_item = {'title': message.text, 'likes': 0, 'dislikes': 0, 'date': datetime.now()}
    bot.reply_to(message, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞':", reply_markup=cancel_markup())
    bot.register_next_step_handler(message, process_news_photo, news_item)

def process_news_photo(message, news_item):
    if process_cancel(message):
        return
    if message.photo:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        photo_dir = os.path.join('news_photos', os.path.dirname(file_info.file_path))
        os.makedirs(photo_dir, exist_ok=True)
        src = os.path.join('news_photos', file_info.file_path)
        
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        news_item['photo'] = src
        bot.reply_to(message, "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞':", reply_markup=cancel_markup())
        bot.register_next_step_handler(message, process_news_description, news_item)
    else:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞'.", reply_markup=cancel_markup())
        bot.register_next_step_handler(message, process_news_photo, news_item)

def process_news_description(message, news_item):
    if process_cancel(message):
        return
    news_item['description'] = message.text
    save_news(news_item)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ news.append(news_item)
    bot.reply_to(message, "‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_menu_markup())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    notification = f"üì£ –ù–û–í–ê–Ø –ù–û–í–û–°–¢–¨! üì£\n\nüìå {news_item['title']}\n\n–£–∑–Ω–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–æ–≤–æ—Å—Ç–∏!"
    notify_all_users(notification)

def show_news(message):
    news = load_news()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    if not news:
        bot.send_message(message.chat.id, "üì∞ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.", reply_markup=main_menu_markup())
        return

    markup = types.InlineKeyboardMarkup()
    for news_item in news:
        markup.add(types.InlineKeyboardButton(f"üìå {news_item['title']}", callback_data=f'news_{news_item["id"]}'))
    
    if message.from_user.id == ADMIN_ID:
        markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data='delete_news'))
    
    bot.send_message(message.chat.id, "üì∞ –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=markup)

def show_news_details(message, news_id):
    news = load_news()
    news_item = next((item for item in news if item['id'] == news_id), None)
    if news_item:
        with open(news_item['photo'], 'rb') as photo:
            caption = f"üìå {news_item['title']}\n\n"
            caption += f"üìù {news_item['description']}\n\n"
            caption += f"üëç {news_item['likes']} üëé {news_item['dislikes']}\n"
            caption += f"üïí {news_item['date'].strftime('%d.%m.%Y %H:%M')}"
            
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("üëç", callback_data=f'like_{news_id}'),
                types.InlineKeyboardButton("üëé", callback_data=f'dislike_{news_id}')
            )
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='news'))
            
            if message.from_user.id == ADMIN_ID:
                markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_news_{news_id}'))
            
            bot.send_photo(message.chat.id, photo, caption=caption, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_markup())

def handle_like(call, news_id):
    user_id = call.from_user.id
    current_reaction = get_user_reaction(news_id, user_id)
    
    if current_reaction == 'like':
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏!")
    elif current_reaction == 'dislike':
        update_news_reaction(news_id, user_id, 'like')
        cursor.execute('UPDATE news SET likes = likes + 1, dislikes = dislikes - 1 WHERE id = ?', (news_id,))
        conn.commit()
        bot.answer_callback_query(call.id, "–í–∞—à –¥–∏–∑–ª–∞–π–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –ª–∞–π–∫!")
    else:
        update_news_reaction(news_id, user_id, 'like')
        cursor.execute('UPDATE news SET likes = likes + 1 WHERE id = ?', (news_id,))
        conn.commit()
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ª–∞–π–∫!")
    
    show_news_details(call.message, news_id)

def handle_dislike(call, news_id):
    user_id = call.from_user.id
    current_reaction = get_user_reaction(news_id, user_id)
    
    if current_reaction == 'dislike':
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏!")
    elif current_reaction == 'like':
        update_news_reaction(news_id, user_id, 'dislike')
        cursor.execute('UPDATE news SET likes = likes - 1, dislikes = dislikes + 1 WHERE id = ?', (news_id,))
        conn.commit()
        bot.answer_callback_query(call.id, "–í–∞—à –ª–∞–π–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –¥–∏–∑–ª–∞–π–∫!")
    else:
        update_news_reaction(news_id, user_id, 'dislike')
        cursor.execute('UPDATE news SET dislikes = dislikes + 1 WHERE id = ?', (news_id,))
        conn.commit()
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –¥–∏–∑–ª–∞–π–∫!")
    
    show_news_details(call.message, news_id)
    
@bot.message_handler(commands=['addevent'])
def add_event(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞':", reply_markup=markup)
    bot.register_next_step_handler(message, process_event_name)


def process_event_name(message):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        cancel_action(message)
        return
    event = {'name': message.text}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
    bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞':", reply_markup=markup)
    bot.register_next_step_handler(message, process_event_date, event)

def process_event_date(message, event):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        cancel_action(message)
        return
    try:
        event['date'] = datetime.strptime(message.text, '%d.%m.%Y')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
        bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞':", reply_markup=markup)
        bot.register_next_step_handler(message, process_event_description, event)
    except ValueError:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üîô –û—Ç–º–µ–Ω–∞"))
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞':", reply_markup=markup)
        bot.register_next_step_handler(message, process_event_date, event)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def check_upcoming_events():
    while True:
        current_date = datetime.now().date()
        for event in events:
            event_date = event['date'].date()
            days_until_event = (event_date - current_date).days
            
            if days_until_event == 30:
                notify_all_users(f"üóìÔ∏è –î–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{event['name']}' –æ—Å—Ç–∞–ª—Å—è 1 –º–µ—Å—è—Ü!")
            elif days_until_event in [10, 5, 4, 3, 2]:
                notify_all_users(f"üóìÔ∏è –î–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{event['name']}' –æ—Å—Ç–∞–ª–æ—Å—å {days_until_event} –¥–Ω–µ–π!")
            elif days_until_event == 1:
                notify_all_users(f"‚è∞ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event['name']}' —Å–æ—Å—Ç–æ–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!")
            elif days_until_event == 0:
                notify_all_users(f"üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event['name']}' –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–µ–≥–æ–¥–Ω—è!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        time.sleep(3600)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é process_event_description
def process_event_description(message, event):
    if message.text == "üîô –û—Ç–º–µ–Ω–∞":
        cancel_action(message)
        return
    event['description'] = message.text
    save_event(event)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ events.append(event)
    bot.reply_to(message, "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_menu_markup())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
    event_date = event['date'].strftime('%d.%m.%Y')
    days_until_event = (event['date'].date() - datetime.now().date()).days
    notification = f"üéâ –ù–û–í–û–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï! üéâ\n\nüìå {event['name']}\nüìÖ {event_date}\n\n–î–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {days_until_event} –¥–Ω–µ–π!"
    notify_all_users(notification)

def cancel_action(message):
    bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup())

@bot.message_handler(commands=['events'])

def show_events(message):
    events = load_events()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    if not events:
        bot.send_message(message.chat.id, "üìÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", reply_markup=main_menu_markup())
        return

    for i, event in enumerate(events):
        event_text = f"üìå {event['name']}\nüìÖ {event['date'].strftime('%d.%m.%Y')}\nüìù {event['description']}"
        markup = types.InlineKeyboardMarkup()
        if message.from_user.id == ADMIN_ID:
            markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_event_{event["id"]}'))
        bot.send_message(message.chat.id, event_text, reply_markup=markup)

def show_event_details(message, event_id):
    if 0 <= event_id < len(events):
        event = events[event_id]
        details = f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {event['name']}\n"
        details += f"üìÖ –î–∞—Ç–∞: {event['date'].strftime('%d.%m.%Y')}\n"
        details += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data='events'))
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=details, reply_markup=markup)
    else:
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text="‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu_markup())


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞
bot.set_my_commands([
    types.BotCommand("/start", "–ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º"),
    types.BotCommand("/help", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
    types.BotCommand("/events", "–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"),
    types.BotCommand("/faq", "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
    types.BotCommand("/news", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
    types.BotCommand("/addevent", "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"),
    types.BotCommand("/addnews", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å (–¥–ª—è –∞–¥–º–∏–Ω–∞)")
])

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    if message.text == "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        show_events(message)
    elif message.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏":
        show_news(message)
    elif message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        ask_question(message)
    elif message.text == "üÜò –ü–æ–º–æ—â—å":
        help_command(message)
    elif message.text == "üë§ –û–±–æ –º–Ω–µ":
        about_me(message)
    elif message.text == "üîô –û—Ç–º–µ–Ω–∞":
        cancel_action(message)
    elif message.text == "/users" and message.from_user.id == ADMIN_ID:
        send_user_list(message)
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu_markup())


if __name__ == '__main__':
    load_questions()
    load_users()
    if not os.path.exists('news_photos'):
        os.makedirs('news_photos')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    reminder_thread = threading.Thread(target=check_upcoming_events)
    reminder_thread.daemon = True
    reminder_thread.start()
    
    bot.polling(none_stop=True)
